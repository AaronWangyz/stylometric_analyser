#######################################################################
#                                                                     #
# This is the main function that controls the flow of execution.      #
#                                                                     #
# A required function, "read_input" is defined to read input from     #
# local file. It calls "build_analysis_dataframe" in its return       #
# statement.                                                          #
#                                                                     #
# Function "build_analysis_dataframe" builds a "datafram of           #
# dataframs", and returns it.                                         #
#                                                                     #
# Function "set_visualizer" is implemented for code reusability, it   #
# takes an arg of the article name, and produce plot according to it. #
#                                                                     #
# Function "menu_layer_2" is implemented for code reusability either, #
# it takes two args and calls "set_visualizer" function according to  #
# the passed values.                                                  #
#                                                                     #
#######################################################################
#                                                                     #
# The program was implemented in python 3.6.4, under PyCharm Edu IDE. #
#                                                                     #
#######################################################################
#                                                                     #
#                               Usage                                 #
# User get to choose from articles to be analyzed, then choose which  #
# analysis result to see, a barchart based on user's choice will be   #
# shown in a new window.                                              #
#                                                                     #
# !!!!!!!!!!!!!!!!!!!!!!!!!!! Important !!!!!!!!!!!!!!!!!!!!!!!!!!!!! #
# An unsolvable bug occurs when user is trying to close the current   #
# plot-showing window, is not a bug generated by my code, but a       #
# general bug of matplotlib.pyplot.                                   #
#                                                                     #
# Detailed information regarding the matplotlib bug can be found in   #
# the documentation.                                                  #
#                                                                     #
# When user finds the window cannot be closed by pressing the "x",    #
# just look at then console, once the console prompts for new input,  #
# forget about the window and enter new input. The new input needs    #
# to be entered twice, first time the previous window terminates,     #
# second time generates the new plot.                                 #
#                                                                     #
#######################################################################
#                                                                     #
# Author: Yezhen Wang                                                 #
# Student ID: 2861 9943                                               #
# Email: ywan0072@student.monash.edu                                  #
# Date Created: May 26, 2018                                          #
# Last Modified: May 26, 2018, 08:21 PM                               #
#                                                                     #
#######################################################################
import pandas as pd
import numpy as np
import preprocessor_28619943
import character_28619943
import word_28619943
import visualiser_28619943


# this function builds a dataframe of dataframes
# arg is expected to be preprocessed article
def build_analysis_dataframe(article_string):

    # try to run the code below
    try:

        # initialize instances of "CharacterAnalyser" and "WordAnalyser"
        character_analyzer = character_28619943.CharacterAnalyser()
        word_analyzer = word_28619943.WordAnalyser()

        # declare a dataframe that will be treated as dataframe of dataframes
        analyses = pd.DataFrame(columns=["Type", "Dataframe"])

        # call "analyze_characters" function, "analyze_words" function
        # and pass the preprocessed article to them
        character_analyzer.analyze_characters(article_string)
        word_analyzer.analyse_words(article_string)

        # build dataframe of dataframes #
        # With the structure of:        #
        # Type      Dataframe           #
        #################################
        analyses = analyses.append({"Type": "Char_Frequency", "Dataframe": character_analyzer.char_occ}, ignore_index=True)
        analyses = analyses.append({"Type": "Word_Frequency", "Dataframe": word_analyzer.word_occ}, ignore_index=True)
        analyses = analyses.append({"Type": "Stopword_Frequency", "Dataframe": word_analyzer.get_stopword_frequency()}, ignore_index=True)
        analyses = analyses.append({"Type": "Word_Length_Frequency", "Dataframe": word_analyzer.get_word_length_frequency()}, ignore_index=True)

        return analyses

    # handle invalid variable exception
    except NameError:
        print("Invalid variable passed!")

    # handle invalid type exception
    except TypeError:
        print("Cannot process integer type!")


# this function read from the file
# file name is passed in the arg
def read_input(article_name):

    # try to run the code below
    try:
        # initialize a instance of "Preprocessor"
        preprocessor = preprocessor_28619943.Preprocessor()

        # define a string to store the article
        article_string = ""

        # read from the file, and pass content to a temp list
        with open(article_name) as f:
            temp = f.readlines()
        f.close()

        # convert temp list to string and save the content to string defined above
        article_string = article_string.join(temp)

        # call "tokenise" function and pass the string to it
        preprocessor.tokenise(article_string)

        # store the tokenised list
        article_result = preprocessor.get_tokenised_list()

        # call "build_analysis_dataframe" and pass the tokenised list as arg
        return build_analysis_dataframe(article_result)

    # handle file not found exception
    except FileNotFoundError:
        print("Failed to find file '" + article_name + "' please check your folder.")

    # handle invalid name exception
    except NameError:
        print("Undefined variable '" + article_name + "' detected!")

    # handle invalid type exception
    except TypeError:
        print("Compiler has no idea what are you doing, why pass '" + article_name + "' to this function?")

    # handle really weird user action
    except OSError:
        print("Dude did you just passed a number to this function?")


# this function produces plot according to the arg passed to it
def set_visualizer(article_name):

    # "articles_df" is a "dataframe of dataframes of dataframes"
    # Structure of "articles_df":
    # Article    Dataframe
    #
    # Structure of "Dataframe"
    # Type       Dataframe

    # find the index of the dataframe according to arg passed to this function
    article_index = int(np.where(articles_df.Article == article_name)[0])

    # initialize "AnalysisVisualiser" and pass the dataframe that fits the arg passed to this function
    visual_analyses = visualiser_28619943.AnalysisVisualiser(articles_df.iloc[article_index].Dataframe)

    return visual_analyses


# for code reusability, just a normal user menu
def menu_layer_2(user_choice_1, user_choice_2):

    # define a string to store the article name by user's choice
    article_name = ""

    # assign the article name by user's choice
    if user_choice_1 == "a":
        article_name = "Edward_II_Marlowe"
    elif user_choice_1 == "b":
        article_name = "Henry_VI_Part1_Shakespeare"
    elif user_choice_1 == "c":
        article_name = "Henry_VI_Part2_Shakespeare"
    elif user_choice_1 == "d":
        article_name = "Jew_of_Malta_Marlowe"
    elif user_choice_1 == "e":
        article_name = "Richard_II_Shakespeare"
    elif user_choice_1 == "f":
        article_name = "Hamlet_Shakespeare"

    # plot the graph according to user's choice
    if user_choice_2 == "a":
        set_visualizer(article_name).visualise_character_frequency()
    elif user_choice_2 == "b":
        set_visualizer(article_name).visualise_punctuation_frequency()
    elif user_choice_2 == "c":
        set_visualizer(article_name).visualise_stopword_frequency()
    elif user_choice_2 == "d":
        set_visualizer(article_name).visualise_word_length_frequency()
    elif user_choice_2 == "e":
        set_visualizer(article_name).visualise_character_frequency()
        set_visualizer(article_name).visualise_punctuation_frequency()
        set_visualizer(article_name).visualise_stopword_frequency()
        set_visualizer(article_name).visualise_word_length_frequency()
    elif user_choice_2 == "f":
        return
    else:
        # use recursion to handle invalid user input
        new_choice = input("Invalid input, please re-enter!")
        menu_layer_2(user_choice_1, new_choice)


if __name__ == '__main__':

    # it will take a really long time, IT IS NOT NON-RESPONDING!
    print("Processing articles, this may take few minutes.\n")

    # define a dataframe that will be treated as "dataframe of dataframes od dataframes"
    articles_df = pd.DataFrame(columns=["Article", "Dataframe"])

    # call "read_input" and store the result respectively
    # results are dataframes of 4 analysis results
    articles_df = articles_df.append({"Article": "Edward_II_Marlowe", "Dataframe": read_input("Edward_II_Marlowe.tok")}, ignore_index=True)
    articles_df = articles_df.append({"Article": "Henry_VI_Part1_Shakespeare", "Dataframe": read_input("Henry_VI_Part1_Shakespeare.tok")}, ignore_index=True)
    articles_df = articles_df.append({"Article": "Henry_VI_Part2_Shakespeare", "Dataframe": read_input("Henry_VI_Part2_Shakespeare.tok")}, ignore_index=True)
    articles_df = articles_df.append({"Article": "Jew_of_Malta_Marlowe", "Dataframe": read_input("Jew_of_Malta_Marlowe.tok")}, ignore_index=True)
    articles_df = articles_df.append({"Article": "Richard_II_Shakespeare", "Dataframe": read_input("Richard_II_Shakespeare.tok")}, ignore_index=True)
    articles_df = articles_df.append({"Article": "Hamlet_Shakespeare", "Dataframe": read_input("Hamlet_Shakespeare.tok")}, ignore_index=True)

    # take user input until user want to stop
    while True:

        # reason of using letters but not numbers will be explained in the documentation
        # let user choose which article to be analyzed
        user_choice_1 = input("Please select from below articles:\n"
                              "a. Edward_II_Marlowe\n"
                              "b. Henry_VI_Part1_Shakespeare\n"
                              "c. Henry_VI_Part2_Shakespeare\n"
                              "d. Jew_of_Malta_Marlowe\n"
                              "e. Richard_II_Shakespeare\n"
                              "f. Hamlet_Shakespeare\n"
                              "g. exit\n")

        # let user choose which plot to be shown
        if user_choice_1 == "a":
            user_choice_2 = input("Please select from below analyses:\n"
                                  "a. Character Frequency\n"
                                  "b. Punctuation Frequency\n"
                                  "c. Stop Word Frequency\n"
                                  "d. Word Length Frequency\n"
                                  "e. All\n"
                                  "f. exit\n")
            # call second layer menu handling function
            menu_layer_2(user_choice_1, user_choice_2)

        elif user_choice_1 == "b":
            user_choice_2 = input("Please select from below analyses:\n"
                                  "a. Character Frequency\n"
                                  "b. Punctuation Frequency\n"
                                  "c. Stop Word Frequency\n"
                                  "d. Word Length Frequency\n"
                                  "e. All\n"
                                  "f. exit\n")
            menu_layer_2(user_choice_1, user_choice_2)

        elif user_choice_1 == "c":
            user_choice_2 = input("Please select from below analyses:\n"
                                  "a. Character Frequency\n"
                                  "b. Punctuation Frequency\n"
                                  "c. Stop Word Frequency\n"
                                  "d. Word Length Frequency\n"
                                  "e. All\n"
                                  "f. exit\n")
            menu_layer_2(user_choice_1, user_choice_2)

        elif user_choice_1 == "d":
            user_choice_2 = input("Please select from below analyses:\n"
                                  "a. Character Frequency\n"
                                  "b. Punctuation Frequency\n"
                                  "c. Stop Word Frequency\n"
                                  "d. Word Length Frequency\n"
                                  "e. All\n"
                                  "f. exit\n")
            menu_layer_2(user_choice_1, user_choice_2)

        elif user_choice_1 == "e":
            user_choice_2 = input("Please select from below analyses:\n"
                                  "a. Character Frequency\n"
                                  "b. Punctuation Frequency\n"
                                  "c. Stop Word Frequency\n"
                                  "d. Word Length Frequency\n"
                                  "e. All\n"
                                  "f. exit\n")
            menu_layer_2(user_choice_1, user_choice_2)

        elif user_choice_1 == "f":
            user_choice_2 = input("Please select from below analyses:\n"
                                  "a. Character Frequency\n"
                                  "b. Punctuation Frequency\n"
                                  "c. Stop Word Frequency\n"
                                  "d. Word Length Frequency\n"
                                  "e. All\n"
                                  "f. exit\n")
            menu_layer_2(user_choice_1, user_choice_2)

        elif user_choice_1 == "g":
            quit()

        else:
            print("Invalid input!")
